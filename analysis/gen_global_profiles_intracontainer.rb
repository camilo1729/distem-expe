# There is a directory per number of machines, then there is a directory per type
# of experiment i.e. distem,real.
# After, we have a directory for each kernel version and then different directories that
# contains the profiles for a paraticular run.
# These directories are tagged with the number of nodes and a timestamp.




puts "Generating global profiles"

types = [{:name => "container",:dir => "distem/nodes_1"},
         {:name => "distemv2",:dir => "distem/nodes_1_fixed"},
        {:name => "SM",:dir => "real_mpism"},
        {:name => "affinity",:dir => "real_mpiaffinity"},
        {:name => "distem4",:dir => "distem_4"},
        {:name => "container16",:dir => "distem_16"},
        {:name => "native16",:dir => "real_16"},
        {:name => "distem1vn",:dir => "distem_1vn"},
        {:name => "native",:dir => "real"}]

benchs = ["cg.B","ep.B","ft.B","is.C","lu.B","mg.B"]

PATH_PPROF = `cd ..; find \`pwd\` -name pprof`.chop

num_procs =[2,4,8,16,32,64,128,256,512,1024]

# iterating over the number of machines
types.each do |type|

  benchs.each do |bench|
    num_procs.each do |num|

      profile_dirs = Dir.glob("#{type[:dir]}/profile-#{bench}.#{num}-*")
      output = ""
      profile_dirs.each{ |p_dir|
        puts "Generating global profile for directory #{p_dir}"
        # We enter the profile directory and get a summary of the profile generated by each MPI process
        # This summary is done using pprof provided by TAU. The values in the summary are the mean between all MPI process.
        res= `cd #{p_dir} && #{PATH_PPROF} -s | grep mean -A100 | sed -n '/THROTTLED/!p'`
        # We clean up the output to have a proper column format that can be read using R.

        temp_lines = []
        res.each_line{ |line| temp_lines.push(line) if (/^\d/.match(line.strip) and not line[".TAU"]) }

        temp_lines.each do |line|
          colums = line.split(" ")
          output+= colums[0..5].join("\t") + "\t"+colums[6..colums.length].join+"\n"
        end
      }

      # We merge the summary of each run into a file.
      if output.length > 1 then
        File.open("profile_global_#{type[:name]}_#{bench}_#{num}.txt",'w+') do |f|
          f.puts output
        end
      end

    end
  end
end
